
@mixin adjust-button-height (){
  @include box-sizing(border-box);
  overflow: visible;

  @for $i from 1 through length($btn-size-name) {
    $szselector: create-selector(nth($btn-size-name, $i), $btn-prefix);
    &#{$szselector} {
      @include with-button-ajustment(nth($btn-size, $i), nth($btn-font-size, $i));
    }
  }
}

@mixin button-state ($i) {
  $bd-color: nth($btn-bd-color, $i);
  @if (type-of($bd-color) == 'list') {
    border-top-color: nth($bd-color, 1);
    border-right-color: nth($bd-color, 2);
    border-bottom-color: nth($bd-color, 3);
    border-left-color: nth($bd-color, 4);
  } @else {
    border-color: $bd-color;
  }
  @if (length($btn-font-color) >= $i) {
    color: nth($btn-font-color, $i);
  }
  @if (length($btn-bg-color) >= $i) {
    background-color: nth($btn-bg-color, $i);
  }
  @if ($btn-type == '') {
    @for $j from 1 through length($btn-ustate-name) {
      $uselector: create-u-selector(nth($btn-ustate-name, $j));
      &#{$uselector} {
        background-position: vertical-splites($j - 1 + ($i - 1) * length($btn-ustate-name), $btn-grid-size);
      }
    }
  } @else if($btn-type == 'gradient') {
    $s: nth($btn-gradient-table, $i);
    @for $j from 1 through length($btn-ustate-name) {
      $su: nth($s, $j);
      $uselector: create-u-selector(nth($btn-ustate-name, $j));
      &#{$uselector} {
        @include vertical-gradient(nth($su, 1), nth($su, 2))
      }
    }
  }

}
@mixin button-state-mapping ($name) {
  $i: index($btn-state-name, $name);
  @include button-state($i)
}
@mixin button-size ($i) {
  $l: nth($btn-size, $i) - nth($btn-line-height, $i) - $btn-bd-size * 2;
  $pd-t: floor($l / 2);
  $pd-b: $l - $pd-t;
  @include single-line-height(nth($btn-line-height, $i));
  padding: {
    top: $pd-t;
    bottom: $pd-b;
  }
  @if (length($btn-font-size) >= $i) {
    font-size: nth($btn-font-size, $i);
  }
  @if (length($btn-padding-rl) >= $i) {
    padding: {
      left: nth($btn-padding-rl, $i);
      right: nth($btn-padding-rl, $i);
    }
  }
  @if (length($btn-radius-size) >= $i) {
    border-radius: nth($btn-radius-size, $i);
  }
  @if ($btn-type == '' and length($btn-bg-url) >= $i) {
    background-image: nth($btn-bg-url, $i);
  }
}

@mixin button($width: auto) {
  @include button-like();
  white-space: nowrap;
  outline: none;
  overflow-y: hidden;
  box-shadow: $btn-shadow;
  text-align: center;
  border: $btn-bd-size solid;

  @if ($width != 'auto') {
    width: adjust-box-size($width, $btn-bd-size*2);
  }

  @for $i from 1 through length($btn-size-name) {
    $szselector: create-selector(nth($btn-size-name, $i), $btn-prefix);
    &#{$szselector} {
      @include button-size($i);
    }
  }

  @for $i from 1 through length($btn-state-name) {
    $selector: create-selector(nth($btn-state-name, $i), $btn-prefix);
    &#{$selector} {
      @include button-state($i);
    }
  }


  &#{create-selector('lg', $btn-prefix)}, &#{create-selector('xlg', $btn-prefix)} {
    font-weight: bold;
  }


  &:hover {
    cursor: pointer;
    text-decoration: none;
  }

  &:active {
    box-shadow: none;
  }

  &:focus {
    outline: none;
    @include grow;
  }


  &[disabled], &.disabled {
    @include disabled;
  }


  &.block {
    display: block;
    padding: {
      left: 0;
      right: 0;
    }
  }

}
